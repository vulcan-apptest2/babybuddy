{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home A buddy for babies! Helps caregivers track sleep, feedings, diaper changes, tummy time and more to learn about and predict baby's needs without ( as much ) guess work. Demo A demo of Baby Buddy is available on Heroku. The demo instance resets every hour. Login credentials are: Username: admin Password: admin","title":"Home"},{"location":"#home","text":"A buddy for babies! Helps caregivers track sleep, feedings, diaper changes, tummy time and more to learn about and predict baby's needs without ( as much ) guess work.","title":"Home"},{"location":"#demo","text":"A demo of Baby Buddy is available on Heroku. The demo instance resets every hour. Login credentials are: Username: admin Password: admin","title":"Demo"},{"location":"api/","text":"API Baby Buddy uses the Django REST Framework (DRF) to provide a REST API. The only requirement for (most) requests is to set the Authorization header as described in the Authentication section. The one exception is the /api endpoint, which lists all available endpoints and does not require authorization. Currently, the following endpoints are available for GET , OPTIONS , and POST requests: /api/bmi/ (Body Mass Index) /api/children/ /api/changes/ (Diaper Changes) /api/feedings/ /api/head-circumference/ /api/height/ /api/notes/ /api/pumping/ /api/sleep/ /api/tags/ /api/temperature/ /api/timers/ /api/tummy-times/ /api/weight/ Authentication The TokenAuthentication and SessionAuthentication are enabled by default. Session authentication covers local API requests made by the application itself. Token authentication allows external requests to be made. :exclamation: In a production environment, token authentication should only be used for API calls to an https endpoint. :exclamation: Each user has an API key that can be used for token authentication. This key can be found on the User Settings page for the logged in the user. To use a key for an API request, set the request Authorization header to Token <user-key> . E.g. Authorization: Token 2h23807gd72h7hop382p98hd823dw3g665g56 If no Authorization header set, or the key is not valid the API will return 403 Forbidden with additional details in the response body. Schema The API schema in OpenAPI format can be found in the openapi-schema.yml file in the project root. A live version is also available at the /api/schema path of a running instance. GET Method Request The limit and offset request parameters can be used to limit and offset the results set respectively. For example, the following request will return five diaper changes starting from the 10th diaper change entry: curl -X GET 'https://[...]/api/changes/?limit=5&offset=10' -H 'Authorization: Token [...]' { \"count\" : 20 , \"next\" : \"https://[...]/api/changes/?limit=5&offset=15\" , \"previous\" : \"https://[...]/api/changes/?limit=5&offset=5\" , \"results\" : [] } Field-based filters for specific endpoints can be found the in the filters field of the OPTIONS response for specific endpoints. Single entries can also be retrieved by adding the ID (or in the case of a Child entry, the slug) of a particular entry: curl -X GET https:// [ ... ] /api/children/gregory-hill/ -H 'Authorization: Token [...]' { \"id\" : 3 , \"first_name\" : \"Gregory\" , \"last_name\" : \"Hill\" , \"birth_date\" : \"2020-02-11\" , \"slug\" : \"gregory-hill\" , \"picture\" : null } curl -X GET https:// [ ... ] /api/sleep/1/ -H 'Authorization: Token [...]' { \"id\" : 480 , \"child\" : 3 , \"start\" : \"2020-03-12T21:25:28.916016-07:00\" , \"end\" : \"2020-03-13T01:34:28.916016-07:00\" , \"duration\" : \"04:09:00\" , \"nap\" : false } Response Returns JSON data in the response body in the following format: { \"count\" : <i nt > , \"next\" : <url> , \"previous\" : <url> , \"results\" :[{ ... }] } count : Total number of records ( in the database , not just the response). next : URL for the next set of results. previous : URL for the previous set of results. results : An array of the results of the request. For single entries, returns JSON data in the response body keyed by model field names. This will vary between models. OPTIONS Method Request All endpoints will respond to an OPTIONS request with detailed information about the endpoint's purpose, parameters, filters, etc. Response Returns JSON data in the response body describing the endpoint, available options for POST requests, and available filters for GET requests. The following example describes the /api/children endpoint: { \"name\" : \"Child List\" , \"renders\" : [ \"application/json\" , \"text/html\" ], \"parses\" : [ \"application/json\" , \"application/x-www-form-urlencoded\" , \"multipart/form-data\" ], \"actions\" : { \"POST\" : { \"id\" : { \"type\" : \"integer\" , \"required\" : false , \"read_only\" : true , \"label\" : \"ID\" }, [ ... ] } }, \"filters\" : [ \"first_name\" , \"last_name\" , \"slug\" ] } POST Method Request To add new entries for a particular endpoint, send a POST request with the entry data in JSON format in the request body. The Content-Type header for POST request must be set to application/json . Regular sanity checks will be performed on relevant data. See the OPTIONS response for a particular endpoint for details on required fields and data formats. Timer Field POST requests also accept a timer field to model endpoints supporting duration (Feeding, Sleep, Tummy Time). Set timer to a valid timer ID in a request instead of the start and end fields. The new entry will use the start and end values from the Timer and if the timer is running it will be stopped by this operation. Additionally, if the Timer has a child relationship, the child field will be filled in automatically with the child value from the Timer. The timer field will always override the relevant fields ( child , start , and end ) on the request. E.g., a POST request with both the timer and end fields will ignore the end field value and replace it with the Timer's end value. The same applies for start and child . These fields are all required if the timer field is not set. Example timer field usage Create a new timer associated with a child : curl --location --request POST '[...]/api/timers/' \\ --header 'Authorization: Token [...]' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"child\": 1}' Note the timer id in the response: { \"id\" : 5 , \"child\" : 1 , \"name\" : null , \"start\" : \"2022-05-28T19:59:40.013914Z\" , \"end\" : null , \"duration\" : null , \"active\" : true , \"user\" : 1 } Create a new tummy time entry supplying only the timer id : curl --location --request POST '[...]/api/tummy-times/' \\ --header 'Authorization: Token [...]' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"timer\": 5}' Note that child and start match the timer values (and end is auto-populated): { \"id\" : 162 , \"child\" : 1 , \"start\" : \"2022-05-28T19:59:40.013914Z\" , \"end\" : \"2022-05-28T20:01:13.549099Z\" , \"duration\" : \"00:01:33.535185\" , \"milestone\" : \"\" , \"tags\" : [] } Also note that the timer has been stopped: curl --location --request GET '[...]/api/timers/5' \\ --header 'Authorization: Token [...]' { \"id\" : 5 , \"child\" : 1 , \"name\" : null , \"start\" : \"2022-05-28T19:59:40.013914Z\" , \"end\" : \"2022-05-28T20:01:13.549099Z\" , \"duration\" : \"00:01:33.535185\" , \"active\" : false , \"user\" : 1 } Response Returns JSON data in the response body describing the added/updated instance or error details keyed by either the field in error or the general string non_field_errors (e.g., when validation involves multiple fields). PATCH Method Request To update existing entries, send a PATCH request to the single entry endpoint for the entry to be updated. The Content-Type header for PATCH request must be set to application/json . For example, to update a Diaper Change entry with ID 947 to indicate a \"wet\" diaper only: curl -X PATCH \\ -H 'Authorization: Token [...]' \\ -H \"Content-Type: application/json\" \\ -d '{\"wet\":1, \"solid\":0}' \\ https:// [ ... ] /api/changes/947/ Regular sanity checks will be performed on relevant data. See the OPTIONS response for a particular endpoint for details on required fields and data formats. Response Returns JSON data in the response body describing the added/updated instance or error details keyed by either the field in error or the general string non_field_errors (e.g., when validation involves multiple fields). DELETE Method Request To delete an existing entry, send a DELETE request to the single entry endpoint to be deleted. For example, to delete a Diaper Change entry with ID 947: curl -X DELETE https:// [ ... ] /api/changes/947/ -H 'Authorization: Token [...]' Response Returns an empty response with HTTP status code 204 on success, or a JSON encoded error detail if an error occurred (e.g. {\"detail\":\"Not found.\"} if the requested ID does not exist).","title":"API"},{"location":"api/#api","text":"Baby Buddy uses the Django REST Framework (DRF) to provide a REST API. The only requirement for (most) requests is to set the Authorization header as described in the Authentication section. The one exception is the /api endpoint, which lists all available endpoints and does not require authorization. Currently, the following endpoints are available for GET , OPTIONS , and POST requests: /api/bmi/ (Body Mass Index) /api/children/ /api/changes/ (Diaper Changes) /api/feedings/ /api/head-circumference/ /api/height/ /api/notes/ /api/pumping/ /api/sleep/ /api/tags/ /api/temperature/ /api/timers/ /api/tummy-times/ /api/weight/","title":"API"},{"location":"api/#authentication","text":"The TokenAuthentication and SessionAuthentication are enabled by default. Session authentication covers local API requests made by the application itself. Token authentication allows external requests to be made. :exclamation: In a production environment, token authentication should only be used for API calls to an https endpoint. :exclamation: Each user has an API key that can be used for token authentication. This key can be found on the User Settings page for the logged in the user. To use a key for an API request, set the request Authorization header to Token <user-key> . E.g. Authorization: Token 2h23807gd72h7hop382p98hd823dw3g665g56 If no Authorization header set, or the key is not valid the API will return 403 Forbidden with additional details in the response body.","title":"Authentication"},{"location":"api/#schema","text":"The API schema in OpenAPI format can be found in the openapi-schema.yml file in the project root. A live version is also available at the /api/schema path of a running instance.","title":"Schema"},{"location":"api/#get-method","text":"","title":"GET Method"},{"location":"api/#request","text":"The limit and offset request parameters can be used to limit and offset the results set respectively. For example, the following request will return five diaper changes starting from the 10th diaper change entry: curl -X GET 'https://[...]/api/changes/?limit=5&offset=10' -H 'Authorization: Token [...]' { \"count\" : 20 , \"next\" : \"https://[...]/api/changes/?limit=5&offset=15\" , \"previous\" : \"https://[...]/api/changes/?limit=5&offset=5\" , \"results\" : [] } Field-based filters for specific endpoints can be found the in the filters field of the OPTIONS response for specific endpoints. Single entries can also be retrieved by adding the ID (or in the case of a Child entry, the slug) of a particular entry: curl -X GET https:// [ ... ] /api/children/gregory-hill/ -H 'Authorization: Token [...]' { \"id\" : 3 , \"first_name\" : \"Gregory\" , \"last_name\" : \"Hill\" , \"birth_date\" : \"2020-02-11\" , \"slug\" : \"gregory-hill\" , \"picture\" : null } curl -X GET https:// [ ... ] /api/sleep/1/ -H 'Authorization: Token [...]' { \"id\" : 480 , \"child\" : 3 , \"start\" : \"2020-03-12T21:25:28.916016-07:00\" , \"end\" : \"2020-03-13T01:34:28.916016-07:00\" , \"duration\" : \"04:09:00\" , \"nap\" : false }","title":"Request"},{"location":"api/#response","text":"Returns JSON data in the response body in the following format: { \"count\" : <i nt > , \"next\" : <url> , \"previous\" : <url> , \"results\" :[{ ... }] } count : Total number of records ( in the database , not just the response). next : URL for the next set of results. previous : URL for the previous set of results. results : An array of the results of the request. For single entries, returns JSON data in the response body keyed by model field names. This will vary between models.","title":"Response"},{"location":"api/#options-method","text":"","title":"OPTIONS Method"},{"location":"api/#request_1","text":"All endpoints will respond to an OPTIONS request with detailed information about the endpoint's purpose, parameters, filters, etc.","title":"Request"},{"location":"api/#response_1","text":"Returns JSON data in the response body describing the endpoint, available options for POST requests, and available filters for GET requests. The following example describes the /api/children endpoint: { \"name\" : \"Child List\" , \"renders\" : [ \"application/json\" , \"text/html\" ], \"parses\" : [ \"application/json\" , \"application/x-www-form-urlencoded\" , \"multipart/form-data\" ], \"actions\" : { \"POST\" : { \"id\" : { \"type\" : \"integer\" , \"required\" : false , \"read_only\" : true , \"label\" : \"ID\" }, [ ... ] } }, \"filters\" : [ \"first_name\" , \"last_name\" , \"slug\" ] }","title":"Response"},{"location":"api/#post-method","text":"","title":"POST Method"},{"location":"api/#request_2","text":"To add new entries for a particular endpoint, send a POST request with the entry data in JSON format in the request body. The Content-Type header for POST request must be set to application/json . Regular sanity checks will be performed on relevant data. See the OPTIONS response for a particular endpoint for details on required fields and data formats.","title":"Request"},{"location":"api/#timer-field","text":"POST requests also accept a timer field to model endpoints supporting duration (Feeding, Sleep, Tummy Time). Set timer to a valid timer ID in a request instead of the start and end fields. The new entry will use the start and end values from the Timer and if the timer is running it will be stopped by this operation. Additionally, if the Timer has a child relationship, the child field will be filled in automatically with the child value from the Timer. The timer field will always override the relevant fields ( child , start , and end ) on the request. E.g., a POST request with both the timer and end fields will ignore the end field value and replace it with the Timer's end value. The same applies for start and child . These fields are all required if the timer field is not set.","title":"Timer Field"},{"location":"api/#example-timer-field-usage","text":"Create a new timer associated with a child : curl --location --request POST '[...]/api/timers/' \\ --header 'Authorization: Token [...]' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"child\": 1}' Note the timer id in the response: { \"id\" : 5 , \"child\" : 1 , \"name\" : null , \"start\" : \"2022-05-28T19:59:40.013914Z\" , \"end\" : null , \"duration\" : null , \"active\" : true , \"user\" : 1 } Create a new tummy time entry supplying only the timer id : curl --location --request POST '[...]/api/tummy-times/' \\ --header 'Authorization: Token [...]' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"timer\": 5}' Note that child and start match the timer values (and end is auto-populated): { \"id\" : 162 , \"child\" : 1 , \"start\" : \"2022-05-28T19:59:40.013914Z\" , \"end\" : \"2022-05-28T20:01:13.549099Z\" , \"duration\" : \"00:01:33.535185\" , \"milestone\" : \"\" , \"tags\" : [] } Also note that the timer has been stopped: curl --location --request GET '[...]/api/timers/5' \\ --header 'Authorization: Token [...]' { \"id\" : 5 , \"child\" : 1 , \"name\" : null , \"start\" : \"2022-05-28T19:59:40.013914Z\" , \"end\" : \"2022-05-28T20:01:13.549099Z\" , \"duration\" : \"00:01:33.535185\" , \"active\" : false , \"user\" : 1 }","title":"Example timer field usage"},{"location":"api/#response_2","text":"Returns JSON data in the response body describing the added/updated instance or error details keyed by either the field in error or the general string non_field_errors (e.g., when validation involves multiple fields).","title":"Response"},{"location":"api/#patch-method","text":"","title":"PATCH Method"},{"location":"api/#request_3","text":"To update existing entries, send a PATCH request to the single entry endpoint for the entry to be updated. The Content-Type header for PATCH request must be set to application/json . For example, to update a Diaper Change entry with ID 947 to indicate a \"wet\" diaper only: curl -X PATCH \\ -H 'Authorization: Token [...]' \\ -H \"Content-Type: application/json\" \\ -d '{\"wet\":1, \"solid\":0}' \\ https:// [ ... ] /api/changes/947/ Regular sanity checks will be performed on relevant data. See the OPTIONS response for a particular endpoint for details on required fields and data formats.","title":"Request"},{"location":"api/#response_3","text":"Returns JSON data in the response body describing the added/updated instance or error details keyed by either the field in error or the general string non_field_errors (e.g., when validation involves multiple fields).","title":"Response"},{"location":"api/#delete-method","text":"","title":"DELETE Method"},{"location":"api/#request_4","text":"To delete an existing entry, send a DELETE request to the single entry endpoint to be deleted. For example, to delete a Diaper Change entry with ID 947: curl -X DELETE https:// [ ... ] /api/changes/947/ -H 'Authorization: Token [...]'","title":"Request"},{"location":"api/#response_4","text":"Returns an empty response with HTTP status code 204 on success, or a JSON encoded error detail if an error occurred (e.g. {\"detail\":\"Not found.\"} if the requested ID does not exist).","title":"Response"},{"location":"import-export/","text":"Import/Export Baby Buddy uses the django-import-export application to provide import and export functionality. Export Export actions are accessible from Baby Buddy's \"Database Admin\" area (the Django admin interface). For example, to export all diaper change entries from Baby Buddy as an Excel file: Log in as a user with \"staff\" access. From the user menu, click \"Database Admin\" under the \"Site\" heading. Click \"Diaper Changes\" in the list of data types. Click the \"Export\" button above the filters list on the right side of the screen. Select the \"xlxs\" format and click \"Submit\" Note: any applied filters will also filter the exported entries. Alternatively, on the Diaper Change list screen (step 3 above), it is possible to select one or many individual records and select \"Export selected Diaper Changes\" from the \"Actions\" list. Import Import actions are accessible from Baby Buddy's \"Database Admin\" area (the Django admin interface). From the list of entry types in the Database Admin, select the type to import and click the \"Import\" button on the list page. The import screen for a particular type will list the fields generally expected to be present for an import. Multiple file types -- including csv, xlsx, etc. -- are supported for the import. The import pages do not provide detailed information about the required data and formats. All rows will be checked for errors on import and any issues will be reported on screen and will need to be resolved before the import can be performed. See the example import files used for tests to get an idea of the expected data format.","title":"Import/Export"},{"location":"import-export/#importexport","text":"Baby Buddy uses the django-import-export application to provide import and export functionality.","title":"Import/Export"},{"location":"import-export/#export","text":"Export actions are accessible from Baby Buddy's \"Database Admin\" area (the Django admin interface). For example, to export all diaper change entries from Baby Buddy as an Excel file: Log in as a user with \"staff\" access. From the user menu, click \"Database Admin\" under the \"Site\" heading. Click \"Diaper Changes\" in the list of data types. Click the \"Export\" button above the filters list on the right side of the screen. Select the \"xlxs\" format and click \"Submit\" Note: any applied filters will also filter the exported entries. Alternatively, on the Diaper Change list screen (step 3 above), it is possible to select one or many individual records and select \"Export selected Diaper Changes\" from the \"Actions\" list.","title":"Export"},{"location":"import-export/#import","text":"Import actions are accessible from Baby Buddy's \"Database Admin\" area (the Django admin interface). From the list of entry types in the Database Admin, select the type to import and click the \"Import\" button on the list page. The import screen for a particular type will list the fields generally expected to be present for an import. Multiple file types -- including csv, xlsx, etc. -- are supported for the import. The import pages do not provide detailed information about the required data and formats. All rows will be checked for errors on import and any issues will be reported on screen and will need to be resolved before the import can be performed. See the example import files used for tests to get an idea of the expected data format.","title":"Import"},{"location":"configuration/application/","text":"Application DEBUG Default: False When in debug mode, Baby Buddy will print much more detailed error information for exceptions. This setting should be False in production deployments. See also Django's documentation on the DEBUG setting . NAP_START_MAX Default: 18:00 The maximum nap start time (in the instance's time zone). Expects the 24-hour format %H:%M. NAP_START_MIN Default: 06:00 The minimum nap start time (in the instance's time zone). Expects the 24-hour format %H:%M. SUB_PATH Default: None If Baby Buddy is hosted in a subdirectory of another server (e.g., http://www.example.com/babybuddy ) this must be set to the subdirectory path (e.g., /babybuddy ) for correct handling of application configuration. Additional steps are required! See Subdirectory configuration for details. TIME_ZONE Default: UTC The default time zone to use for the instance. This value can be overridden per use from the user settings form. Example value America/Los_Angeles See also List of tz database time zones USE_24_HOUR_TIME_FORMAT Default: False Whether to force 24-hour time format for locales that do not ordinarily use it (e.g. en ). Support for this feature must be implemented on a per-locale basis. See format files under babybuddy/formats for supported locales.","title":"Application"},{"location":"configuration/application/#application","text":"","title":"Application"},{"location":"configuration/application/#debug","text":"Default: False When in debug mode, Baby Buddy will print much more detailed error information for exceptions. This setting should be False in production deployments. See also Django's documentation on the DEBUG setting .","title":"DEBUG"},{"location":"configuration/application/#nap_start_max","text":"Default: 18:00 The maximum nap start time (in the instance's time zone). Expects the 24-hour format %H:%M.","title":"NAP_START_MAX"},{"location":"configuration/application/#nap_start_min","text":"Default: 06:00 The minimum nap start time (in the instance's time zone). Expects the 24-hour format %H:%M.","title":"NAP_START_MIN"},{"location":"configuration/application/#sub_path","text":"Default: None If Baby Buddy is hosted in a subdirectory of another server (e.g., http://www.example.com/babybuddy ) this must be set to the subdirectory path (e.g., /babybuddy ) for correct handling of application configuration. Additional steps are required! See Subdirectory configuration for details.","title":"SUB_PATH"},{"location":"configuration/application/#time_zone","text":"Default: UTC The default time zone to use for the instance. This value can be overridden per use from the user settings form. Example value America/Los_Angeles See also List of tz database time zones","title":"TIME_ZONE"},{"location":"configuration/application/#use_24_hour_time_format","text":"Default: False Whether to force 24-hour time format for locales that do not ordinarily use it (e.g. en ). Support for this feature must be implemented on a per-locale basis. See format files under babybuddy/formats for supported locales.","title":"USE_24_HOUR_TIME_FORMAT"},{"location":"configuration/database/","text":"Database DB_ENGINE Default: django.db.backends.postgresql The database engine utilized for the deployment. See also Django's documentation on the ENGINE setting . DB_HOST Default: db The name of the database host for the deployment. DB_NAME Default: postgres The name of the database table utilized for the deployment. DB_PASSWORD Default: None The password for the database user for the deployment. In the default example, this is the root PostgreSQL password. DB_PORT Default: 5432 The listening port for the database. The default port is 5432 for PostgreSQL. DB_USER Default: postgres The database username utilized for the deployment.","title":"Database"},{"location":"configuration/database/#database","text":"","title":"Database"},{"location":"configuration/database/#db_engine","text":"Default: django.db.backends.postgresql The database engine utilized for the deployment. See also Django's documentation on the ENGINE setting .","title":"DB_ENGINE"},{"location":"configuration/database/#db_host","text":"Default: db The name of the database host for the deployment.","title":"DB_HOST"},{"location":"configuration/database/#db_name","text":"Default: postgres The name of the database table utilized for the deployment.","title":"DB_NAME"},{"location":"configuration/database/#db_password","text":"Default: None The password for the database user for the deployment. In the default example, this is the root PostgreSQL password.","title":"DB_PASSWORD"},{"location":"configuration/database/#db_port","text":"Default: 5432 The listening port for the database. The default port is 5432 for PostgreSQL.","title":"DB_PORT"},{"location":"configuration/database/#db_user","text":"Default: postgres The database username utilized for the deployment.","title":"DB_USER"},{"location":"configuration/email/","text":"Email EMAIL_HOST Default: None The host to use for sending email. This must be set to enable SMTP email delivery. EMAIL_HOST_PASSWORD Default: (empty) Password to use for the SMTP server defined in EMAIL_HOST . This setting is used in conjunction with EMAIL_HOST_USER when authenticating to the SMTP server. EMAIL_HOST_USER Default: (empty) Username to use for the SMTP server defined in EMAIL_HOST . EMAIL_PORT Default: 25 Port to use for the SMTP server defined in EMAIL_HOST . EMAIL_USE_TLS Default: False Whether to use a TLS (secure) connection when talking to the SMTP server. EMAIL_USE_SSL Default: False Whether to use an implicit TLS (secure) connection when talking to the SMTP server. EMAIL_SSL_KEYFILE Default: None f EMAIL_USE_SSL or EMAIL_USE_TLS is True , you can optionally specify the path to a PEM-formatted certificate chain file to use for the SSL connection. EMAIL_SSL_CERTFILE Default: None If EMAIL_USE_SSL or EMAIL_USE_TLS is True , you can optionally specify the path to a PEM-formatted private key file to use for the SSL connection.","title":"Email"},{"location":"configuration/email/#email","text":"","title":"Email"},{"location":"configuration/email/#email_host","text":"Default: None The host to use for sending email. This must be set to enable SMTP email delivery.","title":"EMAIL_HOST"},{"location":"configuration/email/#email_host_password","text":"Default: (empty) Password to use for the SMTP server defined in EMAIL_HOST . This setting is used in conjunction with EMAIL_HOST_USER when authenticating to the SMTP server.","title":"EMAIL_HOST_PASSWORD"},{"location":"configuration/email/#email_host_user","text":"Default: (empty) Username to use for the SMTP server defined in EMAIL_HOST .","title":"EMAIL_HOST_USER"},{"location":"configuration/email/#email_port","text":"Default: 25 Port to use for the SMTP server defined in EMAIL_HOST .","title":"EMAIL_PORT"},{"location":"configuration/email/#email_use_tls","text":"Default: False Whether to use a TLS (secure) connection when talking to the SMTP server.","title":"EMAIL_USE_TLS"},{"location":"configuration/email/#email_use_ssl","text":"Default: False Whether to use an implicit TLS (secure) connection when talking to the SMTP server.","title":"EMAIL_USE_SSL"},{"location":"configuration/email/#email_ssl_keyfile","text":"Default: None f EMAIL_USE_SSL or EMAIL_USE_TLS is True , you can optionally specify the path to a PEM-formatted certificate chain file to use for the SSL connection.","title":"EMAIL_SSL_KEYFILE"},{"location":"configuration/email/#email_ssl_certfile","text":"Default: None If EMAIL_USE_SSL or EMAIL_USE_TLS is True , you can optionally specify the path to a PEM-formatted private key file to use for the SSL connection.","title":"EMAIL_SSL_CERTFILE"},{"location":"configuration/intro/","text":"Customization Environment variables can be used to define a number of configuration settings. Baby Buddy will check the application directory structure for an .env file or take these variables from the system environment. System environment variables take precedence over the contents of an .env file.","title":"Customization"},{"location":"configuration/intro/#customization","text":"Environment variables can be used to define a number of configuration settings. Baby Buddy will check the application directory structure for an .env file or take these variables from the system environment. System environment variables take precedence over the contents of an .env file.","title":"Customization"},{"location":"configuration/security/","text":"Security ALLOWED_HOSTS Default: * (any host) Set this variable to a single host or comma-separated list of hosts without spaces. This should always be set to a specific host or hosts in production deployments. Do not include schemes (\"http\" or \"https\") with this setting. Example value baby.example.test,baby.example2.test See also Django's documentation on the ALLOWED_HOSTS setting CSRF_TRUSTED_ORIGINS SECURE_PROXY_SSL_HEADER CSRF_TRUSTED_ORIGINS Default: None If Baby Buddy is behind a proxy, you may need add all possible origins to this setting for form submission to work correctly. Separate multiple origins with commas. Each entry must contain both the scheme (http, https) and fully-qualified domain name. Example value https://baby.example.test,http://baby.example2.test,http://babybudy See also Django's documentation on the CSRF_TRUSTED_ORIGINS setting ALLOWED_HOSTS SECURE_PROXY_SSL_HEADER PROXY_HEADER Default: HTTP_REMOTE_USER Sets the header to read the authenticated username from when REVERSE_PROXY_AUTH has been enabled. Example value HTTP_X_AUTH_USER See also Django's documentation on the REMOTE_USER authentication method REVERSE_PROXY_AUTH REVERSE_PROXY_AUTH Default: False Enable use of PROXY_HEADER to pass the username of an authenticated user. This setting should only be used with a properly configured reverse proxy to ensure the headers are not forwarded from sources other than your proxy. See also PROXY_HEADER SECRET_KEY Default: None A random, unique string must be set as the \"secret key\" before Baby Buddy can be deployed and run. See also Django's documentation on the SECRET_KEY setting . SECURE_PROXY_SSL_HEADER Default: None If Baby Buddy is behind a proxy, you may need to set this to True in order to trust the X-Forwarded-Proto header that comes from your proxy, and any time its value is \"https\". This guarantees the request is secure (i.e., it originally came in via HTTPS). See also Django's documentation on the SECURE_PROXY_SSL_HEADER setting ALLOWED_HOSTS CSRF_TRUSTED_ORIGINS","title":"Security"},{"location":"configuration/security/#security","text":"","title":"Security"},{"location":"configuration/security/#allowed_hosts","text":"Default: * (any host) Set this variable to a single host or comma-separated list of hosts without spaces. This should always be set to a specific host or hosts in production deployments. Do not include schemes (\"http\" or \"https\") with this setting. Example value baby.example.test,baby.example2.test See also Django's documentation on the ALLOWED_HOSTS setting CSRF_TRUSTED_ORIGINS SECURE_PROXY_SSL_HEADER","title":"ALLOWED_HOSTS"},{"location":"configuration/security/#csrf_trusted_origins","text":"Default: None If Baby Buddy is behind a proxy, you may need add all possible origins to this setting for form submission to work correctly. Separate multiple origins with commas. Each entry must contain both the scheme (http, https) and fully-qualified domain name. Example value https://baby.example.test,http://baby.example2.test,http://babybudy See also Django's documentation on the CSRF_TRUSTED_ORIGINS setting ALLOWED_HOSTS SECURE_PROXY_SSL_HEADER","title":"CSRF_TRUSTED_ORIGINS"},{"location":"configuration/security/#proxy_header","text":"Default: HTTP_REMOTE_USER Sets the header to read the authenticated username from when REVERSE_PROXY_AUTH has been enabled. Example value HTTP_X_AUTH_USER See also Django's documentation on the REMOTE_USER authentication method REVERSE_PROXY_AUTH","title":"PROXY_HEADER"},{"location":"configuration/security/#reverse_proxy_auth","text":"Default: False Enable use of PROXY_HEADER to pass the username of an authenticated user. This setting should only be used with a properly configured reverse proxy to ensure the headers are not forwarded from sources other than your proxy. See also PROXY_HEADER","title":"REVERSE_PROXY_AUTH"},{"location":"configuration/security/#secret_key","text":"Default: None A random, unique string must be set as the \"secret key\" before Baby Buddy can be deployed and run. See also Django's documentation on the SECRET_KEY setting .","title":"SECRET_KEY"},{"location":"configuration/security/#secure_proxy_ssl_header","text":"Default: None If Baby Buddy is behind a proxy, you may need to set this to True in order to trust the X-Forwarded-Proto header that comes from your proxy, and any time its value is \"https\". This guarantees the request is secure (i.e., it originally came in via HTTPS). See also Django's documentation on the SECURE_PROXY_SSL_HEADER setting ALLOWED_HOSTS CSRF_TRUSTED_ORIGINS","title":"SECURE_PROXY_SSL_HEADER"},{"location":"configuration/storage/","text":"Storage ALLOW_UPLOADS Default: True Whether to allow uploads (e.g., of Child photos). For some deployments (Heroku) this setting will default to False due to the lack of available persistent storage. AWS_ACCESS_KEY_ID Default: None Required to access your AWS S3 bucket, should be uniquely generated per bucket for security. See also: AWS_STORAGE_BUCKET_NAME AWS_SECRET_ACCESS_KEY Default: None Required to access your AWS S3 bucket, should be uniquely generated per bucket for security. See also: AWS_STORAGE_BUCKET_NAME AWS_STORAGE_BUCKET_NAME Default: None If you would like to use AWS S3 for storage on ephemeral storage platforms like Heroku you will need to create a bucket and add its name. See django-storages' Amazon S3 documentation . AWS_S3_ENDPOINT_URL Default: None Custom URL to use when connecting to S3, including scheme. This allows to use a S3-compatible storage service of another provider than AWS.","title":"Storage"},{"location":"configuration/storage/#storage","text":"","title":"Storage"},{"location":"configuration/storage/#allow_uploads","text":"Default: True Whether to allow uploads (e.g., of Child photos). For some deployments (Heroku) this setting will default to False due to the lack of available persistent storage.","title":"ALLOW_UPLOADS"},{"location":"configuration/storage/#aws_access_key_id","text":"Default: None Required to access your AWS S3 bucket, should be uniquely generated per bucket for security. See also: AWS_STORAGE_BUCKET_NAME","title":"AWS_ACCESS_KEY_ID"},{"location":"configuration/storage/#aws_secret_access_key","text":"Default: None Required to access your AWS S3 bucket, should be uniquely generated per bucket for security. See also: AWS_STORAGE_BUCKET_NAME","title":"AWS_SECRET_ACCESS_KEY"},{"location":"configuration/storage/#aws_storage_bucket_name","text":"Default: None If you would like to use AWS S3 for storage on ephemeral storage platforms like Heroku you will need to create a bucket and add its name. See django-storages' Amazon S3 documentation .","title":"AWS_STORAGE_BUCKET_NAME"},{"location":"configuration/storage/#aws_s3_endpoint_url","text":"Default: None Custom URL to use when connecting to S3, including scheme. This allows to use a S3-compatible storage service of another provider than AWS.","title":"AWS_S3_ENDPOINT_URL"},{"location":"contributing/development-environment/","text":"Development environment Click the Gitpod badge to open a new development environment in Gitpod or use the information and steps below to set up a local development environment for Baby Buddy. Requirements Python 3.7+, pip, pipenv NodeJS 16.x and NPM 8.x (NVM recommended) Gulp Possibly libpq-dev This is necessary if psycopg2 can't find an appropriate prebuilt binary. Installation Install pipenv per Installing pipenv Install required Python packages, including dev packages pipenv install --three --dev If this fails, install libpq-dev (e.g. sudo apt install libpq-dev ) and try again. Installed Node 16.x (if necessary) nvm install 16 Activate Node 16.x nvm use Install Gulp CLI npm install -g gulp-cli Install required Node packages npm install Set, at least, the DJANGO_SETTINGS_MODULE environment variable export DJANGO_SETTINGS_MODULE = babybuddy.settings.development This process will differ based on the host OS. The above example is for Linux-based systems. See Configuration for other settings and methods for defining them. Migrate the database gulp migrate Create cache table gulp createcachetable Build assets and run the server gulp This command will also watch for file system changes to rebuild assets and restart the server as needed. Open http://127.0.0.1:8000 and log in with the default username and password ( admin / admin ).","title":"Development environment"},{"location":"contributing/development-environment/#development-environment","text":"Click the Gitpod badge to open a new development environment in Gitpod or use the information and steps below to set up a local development environment for Baby Buddy.","title":"Development environment"},{"location":"contributing/development-environment/#requirements","text":"Python 3.7+, pip, pipenv NodeJS 16.x and NPM 8.x (NVM recommended) Gulp Possibly libpq-dev This is necessary if psycopg2 can't find an appropriate prebuilt binary.","title":"Requirements"},{"location":"contributing/development-environment/#installation","text":"Install pipenv per Installing pipenv Install required Python packages, including dev packages pipenv install --three --dev If this fails, install libpq-dev (e.g. sudo apt install libpq-dev ) and try again. Installed Node 16.x (if necessary) nvm install 16 Activate Node 16.x nvm use Install Gulp CLI npm install -g gulp-cli Install required Node packages npm install Set, at least, the DJANGO_SETTINGS_MODULE environment variable export DJANGO_SETTINGS_MODULE = babybuddy.settings.development This process will differ based on the host OS. The above example is for Linux-based systems. See Configuration for other settings and methods for defining them. Migrate the database gulp migrate Create cache table gulp createcachetable Build assets and run the server gulp This command will also watch for file system changes to rebuild assets and restart the server as needed. Open http://127.0.0.1:8000 and log in with the default username and password ( admin / admin ).","title":"Installation"},{"location":"contributing/gulp-command-reference/","text":"Gulp command reference Definitions Baby Buddy's Gulp commands are defined in gulpfile.js . Baby Buddy's management commands are defined in babybuddy/management/commands . Commands gulp Executes the build and watch commands and runs Django's development server. This command also accepts the special parameter --ip for setting the server IP address. See gulp runserver for details. build Creates all script, style and \"extra\" assets and places them in the babybuddy/static folder. docs:build Builds the documentation site in a local directory ( site by default). docs:deploy Deploys the documentation site to GitHub Pages. docs:watch Runs a local server for the documentation site reloading whenever documentation sites files (in the docs directory) as modified. clean Deletes all build folders and the root static folder. Generally this should be run before a gulp build to remove previous build files and the generated static assets. collectstatic Executes Django's collectstatic management task. This task relies on files in the babybuddy/static folder, so generally gulp build should be run before this command for production deployments. Gulp also passes along non-overlapping arguments for this command, e.g. --no-input . Note: a SECRET_KEY value must be set for this command to work. compilemessages Executes Django's compilemessages management task. See django-admin compilemessages for more details about other options and functionality of this command. coverage Create a test coverage report. See .coveragerc for default settings information. createcachetable Executes Django's createcachetable management task. See django-admin createcachetable for more details about other options and functionality of this command. extras Copies \"extra\" files (fonts, images and server root contents) to the build folder. fake Adds some fake data to the database. By default, fake creates one child and 31 days of random data. Use the --children and --days flags to change the default values, e.g. gulp fake --children 5 --days 7 to generate five fake children and seven days of data for each. format Formats Baby Buddy's code base using black . Run this before commits to ensure linting will pass! generateschema Updates the openapi-schema.yml file in the project root based on current API functionality. lint Executes Python and SASS linting for all relevant source files. makemessages Executes Django's makemessages management task. See django-admin makemessages for more details about other options and functionality of this command. When working on a single translation, the -l flag is useful to make message for only that language, e.g. gulp makemessages -l fr to make only a French language translation file. makemigrations Executes Django's makemigrations management task. Gulp also passes along non-overlapping arguments for this command. migrate Executes Django's migrate management task. In addition to migrating the database, this command creates the default admin user. Gulp also passes along non-overlapping arguments for this command. reset Resets the database to a default state with one fake child and 31 days of fake data. runserver Executes Django's runserver management task. Gulp passes non-overlapping arguments for this command. A special parameter, --ip , is also available to set the IP for the server. E.g., execute gulp runserver --ip 0.0.0.0:8000 to make the server available to other devices on your local network. scripts Builds and combines relevant application scripts. Generally this command does not need to be executed independently - see the build command. styles Builds and combines SASS styles in to CSS files. Generally this command does not need to be executed independently - see the build command. test Executes Baby Buddy's suite of tests. Gulp also passes along non-overlapping arguments for this command, however individual tests cannot be run with this command. python manage.py test can be used for individual test execution. updateglyphs Downloads generated glyph font files data from Fonttello based on config.json file . This only needs to be run after making changes to the config file. updatestatic Rebuilds Baby Buddy's /static folder by running the following commands in order: lint clean build collectstatic Execute and commit changes made by this command whenever changing Baby Buddy's frontend code (SASS, JS, etc.).","title":"Gulp command reference"},{"location":"contributing/gulp-command-reference/#gulp-command-reference","text":"","title":"Gulp command reference"},{"location":"contributing/gulp-command-reference/#definitions","text":"Baby Buddy's Gulp commands are defined in gulpfile.js . Baby Buddy's management commands are defined in babybuddy/management/commands .","title":"Definitions"},{"location":"contributing/gulp-command-reference/#commands","text":"","title":"Commands"},{"location":"contributing/gulp-command-reference/#gulp","text":"Executes the build and watch commands and runs Django's development server. This command also accepts the special parameter --ip for setting the server IP address. See gulp runserver for details.","title":"gulp"},{"location":"contributing/gulp-command-reference/#build","text":"Creates all script, style and \"extra\" assets and places them in the babybuddy/static folder.","title":"build"},{"location":"contributing/gulp-command-reference/#docsbuild","text":"Builds the documentation site in a local directory ( site by default).","title":"docs:build"},{"location":"contributing/gulp-command-reference/#docsdeploy","text":"Deploys the documentation site to GitHub Pages.","title":"docs:deploy"},{"location":"contributing/gulp-command-reference/#docswatch","text":"Runs a local server for the documentation site reloading whenever documentation sites files (in the docs directory) as modified.","title":"docs:watch"},{"location":"contributing/gulp-command-reference/#clean","text":"Deletes all build folders and the root static folder. Generally this should be run before a gulp build to remove previous build files and the generated static assets.","title":"clean"},{"location":"contributing/gulp-command-reference/#collectstatic","text":"Executes Django's collectstatic management task. This task relies on files in the babybuddy/static folder, so generally gulp build should be run before this command for production deployments. Gulp also passes along non-overlapping arguments for this command, e.g. --no-input . Note: a SECRET_KEY value must be set for this command to work.","title":"collectstatic"},{"location":"contributing/gulp-command-reference/#compilemessages","text":"Executes Django's compilemessages management task. See django-admin compilemessages for more details about other options and functionality of this command.","title":"compilemessages"},{"location":"contributing/gulp-command-reference/#coverage","text":"Create a test coverage report. See .coveragerc for default settings information.","title":"coverage"},{"location":"contributing/gulp-command-reference/#createcachetable","text":"Executes Django's createcachetable management task. See django-admin createcachetable for more details about other options and functionality of this command.","title":"createcachetable"},{"location":"contributing/gulp-command-reference/#extras","text":"Copies \"extra\" files (fonts, images and server root contents) to the build folder.","title":"extras"},{"location":"contributing/gulp-command-reference/#fake","text":"Adds some fake data to the database. By default, fake creates one child and 31 days of random data. Use the --children and --days flags to change the default values, e.g. gulp fake --children 5 --days 7 to generate five fake children and seven days of data for each.","title":"fake"},{"location":"contributing/gulp-command-reference/#format","text":"Formats Baby Buddy's code base using black . Run this before commits to ensure linting will pass!","title":"format"},{"location":"contributing/gulp-command-reference/#generateschema","text":"Updates the openapi-schema.yml file in the project root based on current API functionality.","title":"generateschema"},{"location":"contributing/gulp-command-reference/#lint","text":"Executes Python and SASS linting for all relevant source files.","title":"lint"},{"location":"contributing/gulp-command-reference/#makemessages","text":"Executes Django's makemessages management task. See django-admin makemessages for more details about other options and functionality of this command. When working on a single translation, the -l flag is useful to make message for only that language, e.g. gulp makemessages -l fr to make only a French language translation file.","title":"makemessages"},{"location":"contributing/gulp-command-reference/#makemigrations","text":"Executes Django's makemigrations management task. Gulp also passes along non-overlapping arguments for this command.","title":"makemigrations"},{"location":"contributing/gulp-command-reference/#migrate","text":"Executes Django's migrate management task. In addition to migrating the database, this command creates the default admin user. Gulp also passes along non-overlapping arguments for this command.","title":"migrate"},{"location":"contributing/gulp-command-reference/#reset","text":"Resets the database to a default state with one fake child and 31 days of fake data.","title":"reset"},{"location":"contributing/gulp-command-reference/#runserver","text":"Executes Django's runserver management task. Gulp passes non-overlapping arguments for this command. A special parameter, --ip , is also available to set the IP for the server. E.g., execute gulp runserver --ip 0.0.0.0:8000 to make the server available to other devices on your local network.","title":"runserver"},{"location":"contributing/gulp-command-reference/#scripts","text":"Builds and combines relevant application scripts. Generally this command does not need to be executed independently - see the build command.","title":"scripts"},{"location":"contributing/gulp-command-reference/#styles","text":"Builds and combines SASS styles in to CSS files. Generally this command does not need to be executed independently - see the build command.","title":"styles"},{"location":"contributing/gulp-command-reference/#test","text":"Executes Baby Buddy's suite of tests. Gulp also passes along non-overlapping arguments for this command, however individual tests cannot be run with this command. python manage.py test can be used for individual test execution.","title":"test"},{"location":"contributing/gulp-command-reference/#updateglyphs","text":"Downloads generated glyph font files data from Fonttello based on config.json file . This only needs to be run after making changes to the config file.","title":"updateglyphs"},{"location":"contributing/gulp-command-reference/#updatestatic","text":"Rebuilds Baby Buddy's /static folder by running the following commands in order: lint clean build collectstatic Execute and commit changes made by this command whenever changing Baby Buddy's frontend code (SASS, JS, etc.).","title":"updatestatic"},{"location":"contributing/pull-requests/","text":"Pull requests Baby Buddy's maintainers accept and encourage contributions via GitHub Issues and Pull Requests . Maintainers and users may also be found at babybuddy/Lobby on Gitter. Caveats Icon font Baby Buddy uses Fontello to build a custom icon font for icons used throughout the application. See babybuddy/static_src/fontello for further documentation about using the config file with Fontello and license information for fonts used by this application. Pipfile If the Pipfile is changed the requirements.txt must also be updated to reflect the change. This is necessary because hosting environments do not provide adequate support for pipenv. To update the requirements.txt file to be in sync with the Pipenv file run: pipenv requirements > requirements.txt Add and commit the changes to the requirements.txt file. Static files If static file assets (files in a static_src directory) are updated the production static files (in the static directory ) must also be updated and committed . This is done because it prevents the need for Node and related tooling in deployment environments. See gulp updatestatic for more information on how to update the static files. Translations Modifying locale files requires some extra steps. See Translation for details. Pull request process Fork this repository and commit your changes. Make and commit tests for any new features or major functionality changes. Run gulp lint and gulp test (see Gulp command reference ) and ensure that all tests pass. Updated static assets if necessary and commit the /static folder (see gulp updatestatic ). Open a new pull request against the master branch. Maintainers will review new pull requests will as soon as possible, and we will do our best to provide feedback and support potential contributors.","title":"Pull requests"},{"location":"contributing/pull-requests/#pull-requests","text":"Baby Buddy's maintainers accept and encourage contributions via GitHub Issues and Pull Requests . Maintainers and users may also be found at babybuddy/Lobby on Gitter.","title":"Pull requests"},{"location":"contributing/pull-requests/#caveats","text":"","title":"Caveats"},{"location":"contributing/pull-requests/#icon-font","text":"Baby Buddy uses Fontello to build a custom icon font for icons used throughout the application. See babybuddy/static_src/fontello for further documentation about using the config file with Fontello and license information for fonts used by this application.","title":"Icon font"},{"location":"contributing/pull-requests/#pipfile","text":"If the Pipfile is changed the requirements.txt must also be updated to reflect the change. This is necessary because hosting environments do not provide adequate support for pipenv. To update the requirements.txt file to be in sync with the Pipenv file run: pipenv requirements > requirements.txt Add and commit the changes to the requirements.txt file.","title":"Pipfile"},{"location":"contributing/pull-requests/#static-files","text":"If static file assets (files in a static_src directory) are updated the production static files (in the static directory ) must also be updated and committed . This is done because it prevents the need for Node and related tooling in deployment environments. See gulp updatestatic for more information on how to update the static files.","title":"Static files"},{"location":"contributing/pull-requests/#translations","text":"Modifying locale files requires some extra steps. See Translation for details.","title":"Translations"},{"location":"contributing/pull-requests/#pull-request-process","text":"Fork this repository and commit your changes. Make and commit tests for any new features or major functionality changes. Run gulp lint and gulp test (see Gulp command reference ) and ensure that all tests pass. Updated static assets if necessary and commit the /static folder (see gulp updatestatic ). Open a new pull request against the master branch. Maintainers will review new pull requests will as soon as possible, and we will do our best to provide feedback and support potential contributors.","title":"Pull request process"},{"location":"contributing/translation/","text":"Translation POEditor Baby Buddy uses POEditor for translation contributions. Interested contributors can join translation of Baby Buddy for access to a simple, web-based frontend for adding/editing translation files to the project. Manual Baby Buddy has support for translation/localization. A manual translation process will look something like this: Set up a development environment (see Development environment ). Run gulp makemessages -l xx where xx is a specific locale code in the ISO 639-1 format (e.g., \"il\" for Italian or \"es\" for Spanish). This creates a new translation file at locale/xx/LC_MESSAGES/django.po , or updates one if it exists. Open the created/updated django.po file and update the header template with license and contact info. Start translating! Each translatable string will have a msgid value with the string in English and a corresponding (empty) msgstr value where a translated string can be filled in. Once all strings have been translated, run gulp compilemessages -l xx to compile an optimized translation file ( locale/xx/LC_MESSAGES/django.mo ). To expose the new translation as a user setting, add the locale code to the LANGUAGES array in the base settings file ( babybuddy/settings/base.py ). Check if Plotly offers a translation (in node_modules/plotly.js/dist/ ) for the language. If it does: Add the Plotly translation file path to gulpfile.config.js in scriptsConfig.graph . Build, collect, and commit the /static folder (see gulp updatestatic ). Check if Moment offers a translation (in node_modules/moment/locale/ ) for the language. If it does: Add the Moment translation file path to gulpfile.config.js in scriptsConfig.vendor . Build, collect, and commit the /static folder (see gulp updatestatic ). Run the development server, log in, and update the user language to test the newly translated strings. Once the translation is complete, commit the new files and changes to a fork and create a pull request for review. For more information on the Django translation process, see Django's documentation section: Translation .","title":"Translation"},{"location":"contributing/translation/#translation","text":"","title":"Translation"},{"location":"contributing/translation/#poeditor","text":"Baby Buddy uses POEditor for translation contributions. Interested contributors can join translation of Baby Buddy for access to a simple, web-based frontend for adding/editing translation files to the project.","title":"POEditor"},{"location":"contributing/translation/#manual","text":"Baby Buddy has support for translation/localization. A manual translation process will look something like this: Set up a development environment (see Development environment ). Run gulp makemessages -l xx where xx is a specific locale code in the ISO 639-1 format (e.g., \"il\" for Italian or \"es\" for Spanish). This creates a new translation file at locale/xx/LC_MESSAGES/django.po , or updates one if it exists. Open the created/updated django.po file and update the header template with license and contact info. Start translating! Each translatable string will have a msgid value with the string in English and a corresponding (empty) msgstr value where a translated string can be filled in. Once all strings have been translated, run gulp compilemessages -l xx to compile an optimized translation file ( locale/xx/LC_MESSAGES/django.mo ). To expose the new translation as a user setting, add the locale code to the LANGUAGES array in the base settings file ( babybuddy/settings/base.py ). Check if Plotly offers a translation (in node_modules/plotly.js/dist/ ) for the language. If it does: Add the Plotly translation file path to gulpfile.config.js in scriptsConfig.graph . Build, collect, and commit the /static folder (see gulp updatestatic ). Check if Moment offers a translation (in node_modules/moment/locale/ ) for the language. If it does: Add the Moment translation file path to gulpfile.config.js in scriptsConfig.vendor . Build, collect, and commit the /static folder (see gulp updatestatic ). Run the development server, log in, and update the user language to test the newly translated strings. Once the translation is complete, commit the new files and changes to a fork and create a pull request for review. For more information on the Django translation process, see Django's documentation section: Translation .","title":"Manual"},{"location":"setup/deployment/","text":"Deployment The default username and password for Baby Buddy is admin / admin . For any deployment, log in and change the default password immediately . Many of Baby Buddy's configuration settings can be controlled using environment variables - see Configuration for detailed information. Docker Baby Buddy relies on the LinuxServer.io community for a multi-architecture container with strong support. See linuxserver/docker-babybuddy for detailed information about the container or use the following Docker Compose configuration as a template to get started quickly: version : \"2.1\" services : babybuddy : image : lscr.io/linuxserver/babybuddy container_name : babybuddy environment : - TZ=UTC volumes : - /path/to/appdata:/config ports : - 8000:8000 restart : unless-stopped See HTTPS/SSL configuration for information on how to secure Baby Buddy. For doing administrative work within the LSIO container, setting an environment variable may be necessary. For example: docker exec -it babybuddy /bin/bash export DJANGO_SETTINGS_MODULE = \"babybuddy.settings.base\" python3 /app/babybuddy/manage.py clearsessions Heroku For manual deployments to Heroku without using the \"deploy\" button, make sure to create the following settings before pushing: heroku config:set DISABLE_COLLECTSTATIC = 1 heroku config:set DJANGO_SETTINGS_MODULE = babybuddy.settings.heroku heroku config:set SECRET_KEY = <CHANGE TO SOMETHING RANDOM> heroku config:set TIME_ZONE = <DESIRED DEFAULT TIMEZONE> See Configuration for other settings that can be controlled by heroku config:set . After an initial push, execute the following commands: heroku run python manage.py migrate heroku run python manage.py createcachetable Clever Cloud To deploy on Clever Cloud , log in to your Clever Cloud console , create a Python application, link it to a PostgreSQL addon and optionally a Cellar S3 Storage addon (only if you want file storage for child picture in particular). Then make sure to set the following environment variables in your Python application before pushing the babybuddy source code: CC_PYTHON_BACKEND = uwsgi CC_PYTHON_MANAGE_TASKS = migrate, createcachetable CC_PYTHON_MODULE = babybuddy.wsgi:application DJANGO_SETTINGS_MODULE = babybuddy.settings.clever-cloud SECRET_KEY = <CHANGE TO SOMETHING RANDOM> TIME_ZONE = <DESIRED DEFAULT TIMEZONE> AWS_STORAGE_BUCKET_NAME = <DESIRED BUCKET NAME> # only if file storage is needed See Configuration for other environment variables available for your instance of babybuddy. After that, you just have to push babybuddy code repository to the Git deployment URL of your Clever Cloud Python application. Manual There are many ways to deploy Baby Buddy manually to any server/VPS. The basic requirements are Python, a web server, an application server, and a database. Requirements Python 3.7+, pip, pipenv Web server ( nginx , Apache , etc.) Application server ( uwsgi , gunicorn , etc.) Database ( sqlite , Postgres , MySQL , etc.) Example deployment This example assumes a 1 GB VPS instance with Ubuntu 20.04. It uses Python 3.8, nginx, uwsgi and sqlite. It should be sufficient for a few users (e.g., two parents and any number of children). Install system packages sudo apt-get install python3 python3-pip nginx uwsgi uwsgi-plugin-python3 git libopenjp2-7-dev libpq-dev Default python3 to python for this session alias python = python3 Install pipenv sudo -H pip3 install pipenv Set up directories and files sudo mkdir /var/www/babybuddy sudo chown $USER : $( id -gn $USER ) /var/www/babybuddy mkdir -p /var/www/babybuddy/data/media git clone https://github.com/babybuddy/babybuddy.git /var/www/babybuddy/public Move in to the application folder cd /var/www/babybuddy/public Initiate and enter a Python environment with Pipenv locally. export PIPENV_VENV_IN_PROJECT = 1 pipenv install --three pipenv shell Create a production settings file and set the SECRET_KEY and ALLOWED_HOSTS values cp babybuddy/settings/production.example.py babybuddy/settings/production.py editor babybuddy/settings/production.py Initiate the application export DJANGO_SETTINGS_MODULE = babybuddy.settings.production python manage.py migrate python manage.py createcachetable Set appropriate permissions on the database and data folder sudo chown -R www-data:www-data /var/www/babybuddy/data sudo chmod 640 /var/www/babybuddy/data/db.sqlite3 sudo chmod 750 /var/www/babybuddy/data Create and configure the uwsgi app sudo editor /etc/uwsgi/apps-available/babybuddy.ini Example config: [uwsgi] plugins = python3 project = babybuddy base_dir = /var/www/babybuddy chdir = %(base_dir)/public virtualenv = %(chdir)/.venv module = %(project).wsgi:application env = DJANGO_SETTINGS_MODULE=%(project).settings.production master = True vacuum = True See the uWSGI documentation for more advanced configuration details. See Subdirectory configuration for additional configuration required if Baby Buddy will be hosted in a subdirectory of another server. Symlink config and restart uWSGI: sudo ln -s /etc/uwsgi/apps-available/babybuddy.ini /etc/uwsgi/apps-enabled/babybuddy.ini sudo service uwsgi restart Create and configure the nginx server sudo editor /etc/nginx/sites-available/babybuddy Example config: upstream babybuddy { server unix:///var/run/uwsgi/app/babybuddy/socket ; } server { listen 80 ; server_name babybuddy.example.com ; location / { uwsgi_pass babybuddy ; include uwsgi_params ; } location /media { alias /var/www/babybuddy/data/media ; } } See the nginx documentation for more advanced configuration details. See Subdirectory configuration for additional configuration required if Baby Buddy will be hosted in a subdirectory of another server. Symlink config and restart NGINX: sudo ln -s /etc/nginx/sites-available/babybuddy /etc/nginx/sites-enabled/babybuddy sudo service nginx restart That's it (hopefully)! See HTTPS/SSL configuration for information on how to secure Baby Buddy.","title":"Deployment"},{"location":"setup/deployment/#deployment","text":"The default username and password for Baby Buddy is admin / admin . For any deployment, log in and change the default password immediately . Many of Baby Buddy's configuration settings can be controlled using environment variables - see Configuration for detailed information.","title":"Deployment"},{"location":"setup/deployment/#docker","text":"Baby Buddy relies on the LinuxServer.io community for a multi-architecture container with strong support. See linuxserver/docker-babybuddy for detailed information about the container or use the following Docker Compose configuration as a template to get started quickly: version : \"2.1\" services : babybuddy : image : lscr.io/linuxserver/babybuddy container_name : babybuddy environment : - TZ=UTC volumes : - /path/to/appdata:/config ports : - 8000:8000 restart : unless-stopped See HTTPS/SSL configuration for information on how to secure Baby Buddy. For doing administrative work within the LSIO container, setting an environment variable may be necessary. For example: docker exec -it babybuddy /bin/bash export DJANGO_SETTINGS_MODULE = \"babybuddy.settings.base\" python3 /app/babybuddy/manage.py clearsessions","title":"Docker"},{"location":"setup/deployment/#heroku","text":"For manual deployments to Heroku without using the \"deploy\" button, make sure to create the following settings before pushing: heroku config:set DISABLE_COLLECTSTATIC = 1 heroku config:set DJANGO_SETTINGS_MODULE = babybuddy.settings.heroku heroku config:set SECRET_KEY = <CHANGE TO SOMETHING RANDOM> heroku config:set TIME_ZONE = <DESIRED DEFAULT TIMEZONE> See Configuration for other settings that can be controlled by heroku config:set . After an initial push, execute the following commands: heroku run python manage.py migrate heroku run python manage.py createcachetable","title":"Heroku"},{"location":"setup/deployment/#clever-cloud","text":"To deploy on Clever Cloud , log in to your Clever Cloud console , create a Python application, link it to a PostgreSQL addon and optionally a Cellar S3 Storage addon (only if you want file storage for child picture in particular). Then make sure to set the following environment variables in your Python application before pushing the babybuddy source code: CC_PYTHON_BACKEND = uwsgi CC_PYTHON_MANAGE_TASKS = migrate, createcachetable CC_PYTHON_MODULE = babybuddy.wsgi:application DJANGO_SETTINGS_MODULE = babybuddy.settings.clever-cloud SECRET_KEY = <CHANGE TO SOMETHING RANDOM> TIME_ZONE = <DESIRED DEFAULT TIMEZONE> AWS_STORAGE_BUCKET_NAME = <DESIRED BUCKET NAME> # only if file storage is needed See Configuration for other environment variables available for your instance of babybuddy. After that, you just have to push babybuddy code repository to the Git deployment URL of your Clever Cloud Python application.","title":"Clever Cloud"},{"location":"setup/deployment/#manual","text":"There are many ways to deploy Baby Buddy manually to any server/VPS. The basic requirements are Python, a web server, an application server, and a database.","title":"Manual"},{"location":"setup/deployment/#requirements","text":"Python 3.7+, pip, pipenv Web server ( nginx , Apache , etc.) Application server ( uwsgi , gunicorn , etc.) Database ( sqlite , Postgres , MySQL , etc.)","title":"Requirements"},{"location":"setup/deployment/#example-deployment","text":"This example assumes a 1 GB VPS instance with Ubuntu 20.04. It uses Python 3.8, nginx, uwsgi and sqlite. It should be sufficient for a few users (e.g., two parents and any number of children). Install system packages sudo apt-get install python3 python3-pip nginx uwsgi uwsgi-plugin-python3 git libopenjp2-7-dev libpq-dev Default python3 to python for this session alias python = python3 Install pipenv sudo -H pip3 install pipenv Set up directories and files sudo mkdir /var/www/babybuddy sudo chown $USER : $( id -gn $USER ) /var/www/babybuddy mkdir -p /var/www/babybuddy/data/media git clone https://github.com/babybuddy/babybuddy.git /var/www/babybuddy/public Move in to the application folder cd /var/www/babybuddy/public Initiate and enter a Python environment with Pipenv locally. export PIPENV_VENV_IN_PROJECT = 1 pipenv install --three pipenv shell Create a production settings file and set the SECRET_KEY and ALLOWED_HOSTS values cp babybuddy/settings/production.example.py babybuddy/settings/production.py editor babybuddy/settings/production.py Initiate the application export DJANGO_SETTINGS_MODULE = babybuddy.settings.production python manage.py migrate python manage.py createcachetable Set appropriate permissions on the database and data folder sudo chown -R www-data:www-data /var/www/babybuddy/data sudo chmod 640 /var/www/babybuddy/data/db.sqlite3 sudo chmod 750 /var/www/babybuddy/data Create and configure the uwsgi app sudo editor /etc/uwsgi/apps-available/babybuddy.ini Example config: [uwsgi] plugins = python3 project = babybuddy base_dir = /var/www/babybuddy chdir = %(base_dir)/public virtualenv = %(chdir)/.venv module = %(project).wsgi:application env = DJANGO_SETTINGS_MODULE=%(project).settings.production master = True vacuum = True See the uWSGI documentation for more advanced configuration details. See Subdirectory configuration for additional configuration required if Baby Buddy will be hosted in a subdirectory of another server. Symlink config and restart uWSGI: sudo ln -s /etc/uwsgi/apps-available/babybuddy.ini /etc/uwsgi/apps-enabled/babybuddy.ini sudo service uwsgi restart Create and configure the nginx server sudo editor /etc/nginx/sites-available/babybuddy Example config: upstream babybuddy { server unix:///var/run/uwsgi/app/babybuddy/socket ; } server { listen 80 ; server_name babybuddy.example.com ; location / { uwsgi_pass babybuddy ; include uwsgi_params ; } location /media { alias /var/www/babybuddy/data/media ; } } See the nginx documentation for more advanced configuration details. See Subdirectory configuration for additional configuration required if Baby Buddy will be hosted in a subdirectory of another server. Symlink config and restart NGINX: sudo ln -s /etc/nginx/sites-available/babybuddy /etc/nginx/sites-enabled/babybuddy sudo service nginx restart That's it (hopefully)! See HTTPS/SSL configuration for information on how to secure Baby Buddy.","title":"Example deployment"},{"location":"setup/proxy/","text":"Proxy Configuring Baby Buddy to run behind a proxy may require some additional configuration depending on the individual proxy configuration. Baby Buddy's environment variables for configuration should allow most proxy setups to work, but it may require some testing and tweaking of settings. Important configuration CSRF_TRUSTED_ORIGINS Cross Site Request Forgery protection is an important way to prevent malicious users from sending fake requests to Baby Buddy to read, alter, or destroy data. To protect against this threat Baby Buddy checks the Origin header of certain requests to ensure that it matches a \"trusted\" origin for the application. If the origin and host are the same CSRF will pass without any extra configuration but if the two are different the origin must be in CSRF_TRUSTED_ORIGINS to pass. For example if Baby Buddy is configured in a container with a private network and a host babybuddy that is exposed publicly by a proxy (e.g., nginx) at the address https://baby.example.com then form submissions from browsers will have an Origin of https://baby.example.com that does not match the host babybudy . This will cause a CSRF error and the request will be rejected with a 403 Forbidden error. To support this example configuration the environment variable CSRF_TRUSTED_ORIGINS should be set to the full public address (including the scheme): https://baby.example.com for CSRF protected requests to succeed. Note: multiple origins can be added by separating origins with commas. E.g.: CSRF_TRUSTED_ORIGINS = https://baby.example.com,https://baby.example.org SECURE_PROXY_SSL_HEADER If Baby Buddy is configured behind a standard HTTP proxy requests will always been seen as insecure even if the exposed public connection uses HTTPS between the client and proxy. To address this most proxies can be configured to pass a special header to Baby Buddy indicating the scheme used by the original request. X-Forwarded-Proto is a common standard header for this feature and it is currently the only header supported by Baby Buddy. To use this feature the SECURE_PROXY_SSL_HEADER environment variable to True and Baby Buddy will consider the scheme indicated by the X-Forwarded-Proto header to be the scheme used for the request. Additional Resources Caddy Reverse Proxy Defaults NGINX - Using the Forwarded Header (Note: NGINX treats X-Forwarded-Proto as legacy. See the bottom of this resource for relevant information.) Redirect HTTP to HTTPS with HAProxy Traefik Routing - EntryPoints - Forwarded Headers","title":"Proxy"},{"location":"setup/proxy/#proxy","text":"Configuring Baby Buddy to run behind a proxy may require some additional configuration depending on the individual proxy configuration. Baby Buddy's environment variables for configuration should allow most proxy setups to work, but it may require some testing and tweaking of settings.","title":"Proxy"},{"location":"setup/proxy/#important-configuration","text":"","title":"Important configuration"},{"location":"setup/proxy/#csrf_trusted_origins","text":"Cross Site Request Forgery protection is an important way to prevent malicious users from sending fake requests to Baby Buddy to read, alter, or destroy data. To protect against this threat Baby Buddy checks the Origin header of certain requests to ensure that it matches a \"trusted\" origin for the application. If the origin and host are the same CSRF will pass without any extra configuration but if the two are different the origin must be in CSRF_TRUSTED_ORIGINS to pass. For example if Baby Buddy is configured in a container with a private network and a host babybuddy that is exposed publicly by a proxy (e.g., nginx) at the address https://baby.example.com then form submissions from browsers will have an Origin of https://baby.example.com that does not match the host babybudy . This will cause a CSRF error and the request will be rejected with a 403 Forbidden error. To support this example configuration the environment variable CSRF_TRUSTED_ORIGINS should be set to the full public address (including the scheme): https://baby.example.com for CSRF protected requests to succeed. Note: multiple origins can be added by separating origins with commas. E.g.: CSRF_TRUSTED_ORIGINS = https://baby.example.com,https://baby.example.org","title":"CSRF_TRUSTED_ORIGINS"},{"location":"setup/proxy/#secure_proxy_ssl_header","text":"If Baby Buddy is configured behind a standard HTTP proxy requests will always been seen as insecure even if the exposed public connection uses HTTPS between the client and proxy. To address this most proxies can be configured to pass a special header to Baby Buddy indicating the scheme used by the original request. X-Forwarded-Proto is a common standard header for this feature and it is currently the only header supported by Baby Buddy. To use this feature the SECURE_PROXY_SSL_HEADER environment variable to True and Baby Buddy will consider the scheme indicated by the X-Forwarded-Proto header to be the scheme used for the request. Additional Resources Caddy Reverse Proxy Defaults NGINX - Using the Forwarded Header (Note: NGINX treats X-Forwarded-Proto as legacy. See the bottom of this resource for relevant information.) Redirect HTTP to HTTPS with HAProxy Traefik Routing - EntryPoints - Forwarded Headers","title":"SECURE_PROXY_SSL_HEADER"},{"location":"setup/ssl/","text":"HTTPS/SSL The example Docker and manual deployment methods do not include HTTPS/SSL by default. Additional tools and configuration are required to add HTTPS support. Configuration requirements For either approach (host- or container-based) Baby Buddy's configuration will need to be updated to account for the proxy. For details on these settings see Proxy configuration . After configuring the proxy set the following two environment variables and then restart necessary services: CSRF_TRUSTED_ORIGINS = https://babybuddy.example.com SECURE_PROXY_SSL_HEADER = True Host-based proxy This guide assumes Baby Buddy has been deployed to a Debian-like system with snapd installed using the example deployment however this approach can also be used with a Docker deployment if having the proxy in the host is desired (otherwise see Container-based proxy ). If the example deployment with uWSGI and NGINX is already used skip to Install Certbot and Obtain and install certificate . Install NGINX If NGINX is not already installed on the host system install it with a package manager. apt-get -y install nginx NGINX will be used to proxy HTTPS traffic to Baby Buddy. There are many other proxies available for this (often with Let's Encrypt support, as well) so a different one can be used if desired. Configure NGINX If Baby Buddy is running from Docker a new NGINX site will need to be created to send traffic to Docker. The configuration below uses the example domain babybuddy.example.com and assumes Docker has exposed Baby Buddy on port 8000 (the default configuration). editor /etc/nginx/sites-available/babybuddy Initial configuration: server_tokens off ; access_log /var/log/nginx/babybuddy.access.log ; error_log /var/log/nginx/babybuddy.error.log ; server { server_name babybuddy.example.com ; location / { proxy_pass http://localhost:8000 ; proxy_set_header Host $host ; } } Enable the new site: ln -s /etc/nginx/sites-available/babybuddy /etc/nginx/sites-enabled/babybuddy service nginx restart Confirm the site is not accessible at http://babybuddy.example.com . Note: Attempting to log in will result in a CSRF error! This will be addressed after HTTPS has been established. Install Certbot This example uses Let's Encrypt's free service for obtaining SSL certificates. Other methods can be used to obtain and install a certificate as desired. Certbot is used to obtain free SSL certificates from Let's Encrypt. snap install core && snap refresh core snap install --classic certbot ln -s /snap/bin/certbot /usr/bin/certbot Obtain and install certificate The following command will ask for an email address to register with Let's Encrypt and then prompt a service agreement and which NGINX host to obtain a certificate for. The certificate will be installed and activated automatically. certbot --nginx [ answers prompts as required ] service nginx restart Certbot should have updated the NGINX site configuration ( /etc/nginx/sites-available/babybuddy ) to look something like this: server_tokens off ; access_log /var/log/nginx/babybuddy.access.log ; error_log /var/log/nginx/babybuddy.error.log ; server { server_name babybuddy.example.com ; location / { proxy_pass http://localhost:8000 ; proxy_set_header Host $host ; } listen 443 ssl ; # managed by Certbot ssl_certificate /etc/letsencrypt/live/babybuddy.example.com/fullchain.pem ; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/babybuddy.example.com/privkey.pem ; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf ; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem ; # managed by Certbot } server { if ( $host = babybuddy.example.com) { return 301 https:// $host$request_uri ; } # managed by Certbot server_name babybuddy.example.com ; listen 80 ; return 404 ; # managed by Certbot } If the certificate was obtained by some other means the configuration about should be instructive for how to add it to the NGINX site configuration. Container-based proxy If Baby Buddy is already hosted in a Docker container the proxy (NGINX) can be hosted there as well. The configuration provided here assumes the docker-compose.yml example from the Docker deployment method is used. Add NGINX service Add the following services entry to docker-compose.yml : babybuddy-nginx : image : nginx container_name : babybuddy-nginx volumes : - /path/to/appdata/nginx.conf:/etc/nginx/conf.d/default.conf - /path/to/appdata/logs:/var/log/nginx - /path/to/appdata/certs:/certs ports : - 80:80 - 443:443 depends_on : - babybuddy Set the contents of /path/to/appdata/nginx.conf to: server { server_name babybuddy.example.com ; listen 443 ssl ; ssl_certificate /certs/babybuddy.example.com.crt ; ssl_certificate_key /certs/babybuddy.example.com.key ; location / { proxy_pass http://babybuddy:8000 ; proxy_set_header Host $host ; } } server { if ( $host = babybuddy.example.com) { return 301 https:// $host$request_uri ; } server_name babybuddy.example.com ; listen 80 ; return 404 ; } Add certificates Place certificates in /path/to/appdata/certs using the files name of ssl_certificate and ssl_ceritifcate_key in the NGINX configuration.","title":"HTTPS/SSL"},{"location":"setup/ssl/#httpsssl","text":"The example Docker and manual deployment methods do not include HTTPS/SSL by default. Additional tools and configuration are required to add HTTPS support.","title":"HTTPS/SSL"},{"location":"setup/ssl/#configuration-requirements","text":"For either approach (host- or container-based) Baby Buddy's configuration will need to be updated to account for the proxy. For details on these settings see Proxy configuration . After configuring the proxy set the following two environment variables and then restart necessary services: CSRF_TRUSTED_ORIGINS = https://babybuddy.example.com SECURE_PROXY_SSL_HEADER = True","title":"Configuration requirements"},{"location":"setup/ssl/#host-based-proxy","text":"This guide assumes Baby Buddy has been deployed to a Debian-like system with snapd installed using the example deployment however this approach can also be used with a Docker deployment if having the proxy in the host is desired (otherwise see Container-based proxy ). If the example deployment with uWSGI and NGINX is already used skip to Install Certbot and Obtain and install certificate .","title":"Host-based proxy"},{"location":"setup/ssl/#install-nginx","text":"If NGINX is not already installed on the host system install it with a package manager. apt-get -y install nginx NGINX will be used to proxy HTTPS traffic to Baby Buddy. There are many other proxies available for this (often with Let's Encrypt support, as well) so a different one can be used if desired.","title":"Install NGINX"},{"location":"setup/ssl/#configure-nginx","text":"If Baby Buddy is running from Docker a new NGINX site will need to be created to send traffic to Docker. The configuration below uses the example domain babybuddy.example.com and assumes Docker has exposed Baby Buddy on port 8000 (the default configuration). editor /etc/nginx/sites-available/babybuddy Initial configuration: server_tokens off ; access_log /var/log/nginx/babybuddy.access.log ; error_log /var/log/nginx/babybuddy.error.log ; server { server_name babybuddy.example.com ; location / { proxy_pass http://localhost:8000 ; proxy_set_header Host $host ; } } Enable the new site: ln -s /etc/nginx/sites-available/babybuddy /etc/nginx/sites-enabled/babybuddy service nginx restart Confirm the site is not accessible at http://babybuddy.example.com . Note: Attempting to log in will result in a CSRF error! This will be addressed after HTTPS has been established.","title":"Configure NGINX"},{"location":"setup/ssl/#install-certbot","text":"This example uses Let's Encrypt's free service for obtaining SSL certificates. Other methods can be used to obtain and install a certificate as desired. Certbot is used to obtain free SSL certificates from Let's Encrypt. snap install core && snap refresh core snap install --classic certbot ln -s /snap/bin/certbot /usr/bin/certbot","title":"Install Certbot"},{"location":"setup/ssl/#obtain-and-install-certificate","text":"The following command will ask for an email address to register with Let's Encrypt and then prompt a service agreement and which NGINX host to obtain a certificate for. The certificate will be installed and activated automatically. certbot --nginx [ answers prompts as required ] service nginx restart Certbot should have updated the NGINX site configuration ( /etc/nginx/sites-available/babybuddy ) to look something like this: server_tokens off ; access_log /var/log/nginx/babybuddy.access.log ; error_log /var/log/nginx/babybuddy.error.log ; server { server_name babybuddy.example.com ; location / { proxy_pass http://localhost:8000 ; proxy_set_header Host $host ; } listen 443 ssl ; # managed by Certbot ssl_certificate /etc/letsencrypt/live/babybuddy.example.com/fullchain.pem ; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/babybuddy.example.com/privkey.pem ; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf ; # managed by Certbot ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem ; # managed by Certbot } server { if ( $host = babybuddy.example.com) { return 301 https:// $host$request_uri ; } # managed by Certbot server_name babybuddy.example.com ; listen 80 ; return 404 ; # managed by Certbot } If the certificate was obtained by some other means the configuration about should be instructive for how to add it to the NGINX site configuration.","title":"Obtain and install certificate"},{"location":"setup/ssl/#container-based-proxy","text":"If Baby Buddy is already hosted in a Docker container the proxy (NGINX) can be hosted there as well. The configuration provided here assumes the docker-compose.yml example from the Docker deployment method is used.","title":"Container-based proxy"},{"location":"setup/ssl/#add-nginx-service","text":"Add the following services entry to docker-compose.yml : babybuddy-nginx : image : nginx container_name : babybuddy-nginx volumes : - /path/to/appdata/nginx.conf:/etc/nginx/conf.d/default.conf - /path/to/appdata/logs:/var/log/nginx - /path/to/appdata/certs:/certs ports : - 80:80 - 443:443 depends_on : - babybuddy Set the contents of /path/to/appdata/nginx.conf to: server { server_name babybuddy.example.com ; listen 443 ssl ; ssl_certificate /certs/babybuddy.example.com.crt ; ssl_certificate_key /certs/babybuddy.example.com.key ; location / { proxy_pass http://babybuddy:8000 ; proxy_set_header Host $host ; } } server { if ( $host = babybuddy.example.com) { return 301 https:// $host$request_uri ; } server_name babybuddy.example.com ; listen 80 ; return 404 ; }","title":"Add NGINX service"},{"location":"setup/ssl/#add-certificates","text":"Place certificates in /path/to/appdata/certs using the files name of ssl_certificate and ssl_ceritifcate_key in the NGINX configuration.","title":"Add certificates"},{"location":"setup/subdirectory/","text":"Subdirectory Baby Buddy's default configuration assumes deployment in to the root of a web server. Some additional configuration is required to install Baby Buddy in a subdirectory of a server instead (e.g., to http://www.example.com/babybuddy ). Minimum version Baby Buddy added full support for subdirectory installing in version 1.10.2 . While it is still possible to do a subdirectory installation in older versions of Baby Buddy it is not recommended. SUB_PATH Set this environment variable to the subdirectory of the Baby Buddy installation. E.g., SUB_PATH=/babybuddy if the desired URL is http://www.example.com/babybuddy ). uWSGI + NGINX configuration When using uWSGI and NGINX (as in the example deployment ) the following configurations are required. Assume the subdirectory babybuddy for configuration change examples below but this can be anything includes multiple subdirectories (e.g., /my/apps/babybuddy ). Other paths used in these examples also assume a configuration based on the example deployment . uWSGI In the app configuration replace the module declaration with a mount declaration and add the manage-script-name declaration and SUB_PATH environment variable to the [uwsgi] configuration block. - module = %(project).wsgi:application + mount = /babybuddy=%(project).wsgi:application + manage-script-name = true + env = SUB_PATH=/babybuddy NGINX Alter the NGINX server configuration to include the desired subdirectory path in the app (Baby Buddy root) and media location declarations and add a new declaration for the static location . - location / { + location /babybuddy { + location /babybuddy/static { + alias /var/www/babybuddy/public/static; + } - location /media { + location /babybuddy/media {","title":"Subdirectory"},{"location":"setup/subdirectory/#subdirectory","text":"Baby Buddy's default configuration assumes deployment in to the root of a web server. Some additional configuration is required to install Baby Buddy in a subdirectory of a server instead (e.g., to http://www.example.com/babybuddy ).","title":"Subdirectory"},{"location":"setup/subdirectory/#minimum-version","text":"Baby Buddy added full support for subdirectory installing in version 1.10.2 . While it is still possible to do a subdirectory installation in older versions of Baby Buddy it is not recommended.","title":"Minimum version"},{"location":"setup/subdirectory/#sub_path","text":"Set this environment variable to the subdirectory of the Baby Buddy installation. E.g., SUB_PATH=/babybuddy if the desired URL is http://www.example.com/babybuddy ).","title":"SUB_PATH"},{"location":"setup/subdirectory/#uwsgi-nginx-configuration","text":"When using uWSGI and NGINX (as in the example deployment ) the following configurations are required. Assume the subdirectory babybuddy for configuration change examples below but this can be anything includes multiple subdirectories (e.g., /my/apps/babybuddy ). Other paths used in these examples also assume a configuration based on the example deployment .","title":"uWSGI + NGINX configuration"},{"location":"setup/subdirectory/#uwsgi","text":"In the app configuration replace the module declaration with a mount declaration and add the manage-script-name declaration and SUB_PATH environment variable to the [uwsgi] configuration block. - module = %(project).wsgi:application + mount = /babybuddy=%(project).wsgi:application + manage-script-name = true + env = SUB_PATH=/babybuddy","title":"uWSGI"},{"location":"setup/subdirectory/#nginx","text":"Alter the NGINX server configuration to include the desired subdirectory path in the app (Baby Buddy root) and media location declarations and add a new declaration for the static location . - location / { + location /babybuddy { + location /babybuddy/static { + alias /var/www/babybuddy/public/static; + } - location /media { + location /babybuddy/media {","title":"NGINX"},{"location":"user-guide/adding-entries/","text":"Adding Entries Adding Activities Diaper Change From the top navigation bar select the plus sign to add an activity. Select Diaper Change. If necessary, modify the child or time for the change. Select whether the diaper is wet, solid, or both, and if add any details such as color, amount, etc. When complete, select Submit. Feeding From the top navigation bar select the plus sign to add an activity. Select Feeding. If necessary, modify the child, or start/end time for the feeding. Select the type of food, feeding method, amount, and any notes. When complete, select Submit. Note From the top navigation bar select the plus sign to add an activity. Select Note. If necessary, modify the child the note is for. Enter any details you want to remember such as a new food tried or vomiting, etc. Modify the time or date of note as needed. When complete, select Submit. Sleep From the top navigation bar select the plus sign to add an activity. Select Diaper Change. If necessary, modify the child. Select the start time for the feeding. This time must be prior to the end time. When complete, select Submit. Tummy Time From the top navigation bar select the plus sign to add an activity. Select Tummy Time. If necessary, modify the child. Select the start time for the activity. This time must be prior to the end time. When complete, select Submit. Adding Measurements BMI Circumference Temperature From the top navigation bar select the plus sign to add an activity. Select Temperature. If necessary, modify the child or time the temperature was taken. Input the temperature and enter any notes about the instance. When ready, select Submit. Weight From the top navigation bar select the plus sign to add an activity. Select Weight. If necessary, modify the child or date the child was weighed. Input the weight and enter any notes about the instance. When ready, select Submit.","title":"Adding Entries"},{"location":"user-guide/adding-entries/#adding-entries","text":"","title":"Adding Entries"},{"location":"user-guide/adding-entries/#adding-activities","text":"","title":"Adding Activities"},{"location":"user-guide/adding-entries/#diaper-change","text":"From the top navigation bar select the plus sign to add an activity. Select Diaper Change. If necessary, modify the child or time for the change. Select whether the diaper is wet, solid, or both, and if add any details such as color, amount, etc. When complete, select Submit.","title":"Diaper Change"},{"location":"user-guide/adding-entries/#feeding","text":"From the top navigation bar select the plus sign to add an activity. Select Feeding. If necessary, modify the child, or start/end time for the feeding. Select the type of food, feeding method, amount, and any notes. When complete, select Submit.","title":"Feeding"},{"location":"user-guide/adding-entries/#note","text":"From the top navigation bar select the plus sign to add an activity. Select Note. If necessary, modify the child the note is for. Enter any details you want to remember such as a new food tried or vomiting, etc. Modify the time or date of note as needed. When complete, select Submit.","title":"Note"},{"location":"user-guide/adding-entries/#sleep","text":"From the top navigation bar select the plus sign to add an activity. Select Diaper Change. If necessary, modify the child. Select the start time for the feeding. This time must be prior to the end time. When complete, select Submit.","title":"Sleep"},{"location":"user-guide/adding-entries/#tummy-time","text":"From the top navigation bar select the plus sign to add an activity. Select Tummy Time. If necessary, modify the child. Select the start time for the activity. This time must be prior to the end time. When complete, select Submit.","title":"Tummy Time"},{"location":"user-guide/adding-entries/#adding-measurements","text":"","title":"Adding Measurements"},{"location":"user-guide/adding-entries/#bmi","text":"","title":"BMI"},{"location":"user-guide/adding-entries/#circumference","text":"","title":"Circumference"},{"location":"user-guide/adding-entries/#temperature","text":"From the top navigation bar select the plus sign to add an activity. Select Temperature. If necessary, modify the child or time the temperature was taken. Input the temperature and enter any notes about the instance. When ready, select Submit.","title":"Temperature"},{"location":"user-guide/adding-entries/#weight","text":"From the top navigation bar select the plus sign to add an activity. Select Weight. If necessary, modify the child or date the child was weighed. Input the weight and enter any notes about the instance. When ready, select Submit.","title":"Weight"},{"location":"user-guide/getting-started/","text":"Getting Started First Login Dashboard The Baby Buddy dashboard can be reached by selecting Dashboard on the menu or by selecting the Baby Buddy icon in the upper left of the menu. The Dashboard lists an overview of all elements related to your child, including: Last feeding is the time from the start of the last feed and how/where the milk came from (a bottle, or breast). Last diaper change is the time the last diaper change was logged and includes the type of diaper. Last sleep is the start of the last nap/sleep, and includes the nap duration below. Last feeding method is a quick view of how the baby was last fed. This is particularly useful for nursing mothers to remember which breast they started with on the previous feed. Today's Feeding is a snapshot of the total numbers of daily feeds. Active timers let you know if you have a timer running. Statistics is a snapshot of various statistics \u2013 these can be scrolled through or select Statistics from the menu bar to see more. Today's Sleep lists the total number of hours slept for the day. Today's Naps lists the number of naps taken that day in bold and the total nap time below. Today's Tummy Time lists the total number of logged tummy time entries and then each individual entry below. Diaper Changes provides a view of the diapers logged over the week. Please note that. Select the title of any of the cards to see more details. Timeline The timeline page lists all your child's activities over time. On the left (or top on mobile view) is an image of your baby, their name, date of birth, age and then quick links to dashboard, timeline, reports, edit and delete. The timeline lists all activities along with time frames, any notes and the ability to edit any entry. Measurements The Measurements menu provides the option to view and track your baby's measurements of temperature, weight, height, head circumference and BMI. Selecting any of the measurements will open that specific page with all related measurements listed. Add a specific measurement by selecting the add or + measurement. Activities The Activities menu provides the option to view and track your baby's activities such as diaper changes, feedings, sleep, and tummy time. Selecting any of the activities will open that activities' page with all details on recorded activities. Add any activity via this menu as well. See Adding Entries for more information. Timers The Timers menu provides the option to start timers or view all current timers. Quick Start Timer starts a brand-new timer. This is the preferred method to starting timers. Start Timer opens a new page to confirm the child the timer is for, name the timer and update the start time before creating a timer.","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"user-guide/getting-started/#first-login","text":"","title":"First Login"},{"location":"user-guide/getting-started/#dashboard","text":"The Baby Buddy dashboard can be reached by selecting Dashboard on the menu or by selecting the Baby Buddy icon in the upper left of the menu. The Dashboard lists an overview of all elements related to your child, including: Last feeding is the time from the start of the last feed and how/where the milk came from (a bottle, or breast). Last diaper change is the time the last diaper change was logged and includes the type of diaper. Last sleep is the start of the last nap/sleep, and includes the nap duration below. Last feeding method is a quick view of how the baby was last fed. This is particularly useful for nursing mothers to remember which breast they started with on the previous feed. Today's Feeding is a snapshot of the total numbers of daily feeds. Active timers let you know if you have a timer running. Statistics is a snapshot of various statistics \u2013 these can be scrolled through or select Statistics from the menu bar to see more. Today's Sleep lists the total number of hours slept for the day. Today's Naps lists the number of naps taken that day in bold and the total nap time below. Today's Tummy Time lists the total number of logged tummy time entries and then each individual entry below. Diaper Changes provides a view of the diapers logged over the week. Please note that. Select the title of any of the cards to see more details.","title":"Dashboard"},{"location":"user-guide/getting-started/#timeline","text":"The timeline page lists all your child's activities over time. On the left (or top on mobile view) is an image of your baby, their name, date of birth, age and then quick links to dashboard, timeline, reports, edit and delete. The timeline lists all activities along with time frames, any notes and the ability to edit any entry.","title":"Timeline"},{"location":"user-guide/getting-started/#measurements","text":"The Measurements menu provides the option to view and track your baby's measurements of temperature, weight, height, head circumference and BMI. Selecting any of the measurements will open that specific page with all related measurements listed. Add a specific measurement by selecting the add or + measurement.","title":"Measurements"},{"location":"user-guide/getting-started/#activities","text":"The Activities menu provides the option to view and track your baby's activities such as diaper changes, feedings, sleep, and tummy time. Selecting any of the activities will open that activities' page with all details on recorded activities. Add any activity via this menu as well. See Adding Entries for more information.","title":"Activities"},{"location":"user-guide/getting-started/#timers","text":"The Timers menu provides the option to start timers or view all current timers. Quick Start Timer starts a brand-new timer. This is the preferred method to starting timers. Start Timer opens a new page to confirm the child the timer is for, name the timer and update the start time before creating a timer.","title":"Timers"},{"location":"user-guide/managing-users/","text":"Managing Users Creating a User Changing User Settings Changing User Password Creating a User from the Command Line There are 2 ways you can create a user from the command line: Passing user's password as an argument: python manage.py createuser --username <username> --password <password> Interactively setting user's password: python manage.py createuser --username <username> You will then be prompted to enter and confirm a password. If you want to make the user a staff, you can append the --is-staff argument: python manage.py createuser --username <username> --is-staff Another argument you can use with this command is --email python manage.py createuser --username <username> --email <email> To get a list of supported commands: python manage.py createuser --help","title":"Managing Users"},{"location":"user-guide/managing-users/#managing-users","text":"","title":"Managing Users"},{"location":"user-guide/managing-users/#creating-a-user","text":"","title":"Creating a User"},{"location":"user-guide/managing-users/#changing-user-settings","text":"","title":"Changing User Settings"},{"location":"user-guide/managing-users/#changing-user-password","text":"","title":"Changing User Password"},{"location":"user-guide/managing-users/#creating-a-user-from-the-command-line","text":"There are 2 ways you can create a user from the command line: Passing user's password as an argument: python manage.py createuser --username <username> --password <password> Interactively setting user's password: python manage.py createuser --username <username> You will then be prompted to enter and confirm a password. If you want to make the user a staff, you can append the --is-staff argument: python manage.py createuser --username <username> --is-staff Another argument you can use with this command is --email python manage.py createuser --username <username> --email <email> To get a list of supported commands: python manage.py createuser --help","title":"Creating a User from the Command Line"},{"location":"user-guide/using-timers/","text":"Using Timers Starting a Timer From the top navigation bar select the clock icon to start a timer. A new screen will appear with a timer, the date and buttons to assign this timer to a feeding, sleep or tummy time activity. On the bottom of the timer is a red button to delete the timer, a blue button to edit the timer and add a name or change the start time, an orange button to restart the timer and a yellow button to stop the timer. Editing a Timer Deleting a Timer Creating Entries from Timers Create a Feeding Entry From the top navigation bar select the clock icon to start a timer. When the activity is complete, select Feeding. As necessary, modify the child and start/end time of the timer. Update the feed to reflect the type of feeding (i.e. breast milk, bottle, etc.), the feeding method and amount. When ready, select Submit. Create a Sleep Entry From the top navigation bar select the clock icon to start a timer. When the activity is complete, select Sleep. As necessary, modify the child and start/end time of the timer. Add any relevant notes to the sleep. When ready, select Submit. Create a Tummy Time Entry From the top navigation bar select the clock icon to start a timer. When the activity is complete, select Tummy Time. As necessary, modify the child and start/end time of the timer. Add any relevant tummy time milestones. When ready, select Submit.","title":"Using Timers"},{"location":"user-guide/using-timers/#using-timers","text":"","title":"Using Timers"},{"location":"user-guide/using-timers/#starting-a-timer","text":"From the top navigation bar select the clock icon to start a timer. A new screen will appear with a timer, the date and buttons to assign this timer to a feeding, sleep or tummy time activity. On the bottom of the timer is a red button to delete the timer, a blue button to edit the timer and add a name or change the start time, an orange button to restart the timer and a yellow button to stop the timer.","title":"Starting a Timer"},{"location":"user-guide/using-timers/#editing-a-timer","text":"","title":"Editing a Timer"},{"location":"user-guide/using-timers/#deleting-a-timer","text":"","title":"Deleting a Timer"},{"location":"user-guide/using-timers/#creating-entries-from-timers","text":"","title":"Creating Entries from Timers"},{"location":"user-guide/using-timers/#create-a-feeding-entry","text":"From the top navigation bar select the clock icon to start a timer. When the activity is complete, select Feeding. As necessary, modify the child and start/end time of the timer. Update the feed to reflect the type of feeding (i.e. breast milk, bottle, etc.), the feeding method and amount. When ready, select Submit.","title":"Create a Feeding Entry"},{"location":"user-guide/using-timers/#create-a-sleep-entry","text":"From the top navigation bar select the clock icon to start a timer. When the activity is complete, select Sleep. As necessary, modify the child and start/end time of the timer. Add any relevant notes to the sleep. When ready, select Submit.","title":"Create a Sleep Entry"},{"location":"user-guide/using-timers/#create-a-tummy-time-entry","text":"From the top navigation bar select the clock icon to start a timer. When the activity is complete, select Tummy Time. As necessary, modify the child and start/end time of the timer. Add any relevant tummy time milestones. When ready, select Submit.","title":"Create a Tummy Time Entry"}]}